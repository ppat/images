---
# yamllint disable rule:line-length
name: build-image-workflow

# yamllint disable-line rule:truthy
on:
  workflow_call:
    inputs:
      image_context_path:
        required: true
        type: string
      label_title:
        required: true
        type: string
      label_description:
        required: true
        type: string
      repository_dockerhub:
        type: string
        required: false
      repository_private_registry:
        type: string
        required: false
      repository_build_cache:
        type: string
        required: false
      source_git_ref:
        required: true
        type: string
      timeout_minutes:
        required: true
        type: number
    outputs:
      digest:
        value: ${{ jobs.build-image.outputs.digest }}
      imageid:
        value: ${{ jobs.build-image.outputs.imageid }}
      metadata:
        value: ${{ jobs.build-image.outputs.metadata }}

jobs:
  build-image:
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.timeout_minutes }}

    outputs:
      imageid: ${{ steps.image_info.outputs.imageid }}
      digest: ${{ steps.image_info.outputs.digest }}
      metadata: ${{ steps.image_info.outputs.metadata }}

    steps:
    - name: Checkout
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
      with:
        fetch-depth: 1
        repository: ${{ github.repository }}
        ref: ${{ inputs.source_git_ref }}

    - name: Automatically set image tag from git tag
      if: ${{ startsWith(inputs.source_git_ref, 'refs/tags/') }}
      shell: bash
      env:
        SOURCE_GIT_REF: ${{ inputs.source_git_ref }}
      # yamllint disable-line rule:indentation
      run: |
        # use the git ref segment after the final slash (as tag can contain a slash)
        VERSION_RAW="$(echo $SOURCE_GIT_REF | grep -oE '[^/]+$')"
        VERSION_SEMVER="$(echo $VERSION_RAW | grep -o -E '[0-9]+\.[0-9]+\.[0-9]+' | head -1)"
        VERSION_SHA="$(git rev-parse --short HEAD)"

        set -x
        echo "VERSION_SEMVER=$VERSION_SEMVER" >> $GITHUB_ENV
        echo "VERSION_RAW=$VERSION_RAW" >> $GITHUB_ENV
        echo "VERSION_SHA=$VERSION_SHA" >> $GITHUB_ENV

    - name: Automatically set image tag from branch
      if: ${{ startsWith(inputs.source_git_ref, 'refs/heads/') }}
      shell: bash
      env:
        SOURCE_GIT_REF: ${{ inputs.source_git_ref }}
      # yamllint disable-line rule:indentation
      run: |
        # use the git ref segment after the final slash (as branch can contain a slash)
        VERSION_RAW="$(echo $SOURCE_GIT_REF | grep -oE '[^/]+$')"
        VERSION_SHA="$(git rev-parse --short HEAD)"

        set -x
        echo 'VERSION_SEMVER=""' >> $GITHUB_ENV
        echo "VERSION_RAW=$VERSION_RAW" >> $GITHUB_ENV
        echo "VERSION_SHA=$VERSION_SHA" >> $GITHUB_ENV

    - name: Automatically set image build cache parameters
      shell: bash
      env:
        SOURCE_GIT_REF: ${{ inputs.source_git_ref }}
        IMAGE_CACHE: ${{ inputs.repository_build_cache }}
        CACHE_PARAMS: image-manifest=true,oci-mediatypes=true,mode=max,compression=zstd
      # yamllint disable-line rule:indentation
      run: |
        if [[ "$IMAGE_CACHE" == '' ]]; then
          echo "No repository for docker build cache specified, disabling build cache all together."
          CACHE_FROM=""
          CACHE_TO=""
        else
          LAST_COMMIT_MSG=$(git log --oneline --no-merges -1)
          if [[ "$LAST_COMMIT_MSG" =~ "[ci: bust-cache]" ]]; then
            echo "Instruction to bust cache detected in commit message."
            echo "Disabling use of cache for the build. This build itself will still be cached."
            CACHE_FROM=""
          else
            if [[ -z "$VERSION_SEMVER" ]]; then
              echo "Setting cache-from to use both branch and main caches..."
              CACHE_FROM="type=registry,ref=${IMAGE_CACHE}:main type=registry,ref=${IMAGE_CACHE}:${VERSION_RAW}"
            else
              echo "Setting cache-from to use only main cache..."
              CACHE_FROM="type=registry,ref=${IMAGE_CACHE}:main"
            fi
          fi

          if [[ -z "$VERSION_SEMVER" ]]; then
            echo "Setting cache-to to push to branch cache..."
            CACHE_TO="type=registry,ref=${IMAGE_CACHE}:${VERSION_RAW},${CACHE_PARAMS}"
          else
            echo "Setting cache-to to push to main cache..."
            CACHE_TO="type=registry,ref=${IMAGE_CACHE}:main,${CACHE_PARAMS}"
          fi
        fi

        set -x
        echo "CACHE_FROM=\"$CACHE_FROM\"" >> $GITHUB_ENV
        echo "CACHE_TO=\"$CACHE_TO\"" >> $GITHUB_ENV

    - name: Show build parameters
      shell: bash
      run: |
        env | sort | grep -E '^(CACHE_|VERSION_)'

    - name: Set up QEMU
      uses: docker/setup-qemu-action@5927c834f5b4fdf503fca6f4c7eccda82949e1ee # v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@4fd812986e6c8c2a69e18311145f9371337f27d4 # v3
      with:
        buildkitd-flags: '--debug --allow-insecure-entitlement=network.host'
        driver-opts: network=host
        platforms: linux/amd64,linux/arm64

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5
      with:
        images: |-
          ${{ inputs.repository_private_registry != '' && inputs.repository_private_registry || '' }}
          ${{ inputs.repository_dockerhub != '' && inputs.repository_dockerhub || '' }}
        labels: |
          org.opencontainers.image.title=${{ inputs.label_title }}
          org.opencontainers.image.description=${{ inputs.label_description }}
          org.opencontainers.image.version=${{ env.VERSION_RAW }}
        annotations: |
          org.opencontainers.image.title=${{ inputs.label_title }}
          org.opencontainers.image.description=${{ inputs.label_description }}
          org.opencontainers.image.version=${{ env.VERSION_RAW }}
        tags: |-
          type=raw,value=${{ env.VERSION_RAW }},enable=${{ env.VERSION_SEMVER != '' }},priority=1000
          type=semver,pattern={{version}},value=${{ env.VERSION_SEMVER }},enable=${{ env.VERSION_SEMVER != '' }},priority=900
          type=semver,pattern={{major}}.{{minor}},value=${{ env.VERSION_SEMVER }},enable=${{ env.VERSION_SEMVER != '' }},priority=800
          type=semver,pattern={{major}},value=${{ env.VERSION_SEMVER }},enable=${{ env.VERSION_SEMVER != '' }},priority=700
          type=raw,value=latest,enable=${{ env.VERSION_SEMVER != '' }},priority=200
          type=raw,value=${{ env.VERSION_RAW }},enable=${{ env.VERSION_SEMVER == '' }},prefix=branch-,priority=400
          type=raw,value=${{ env.VERSION_SHA }},prefix=git-,priority=300

    - name: Tailscale Connect
      if: ${{ inputs.repository_private_registry != '' }}
      uses: tailscale/github-action@4e4c49acaa9818630ce0bd7a564372c17e33fb4d # v2
      with:
        oauth-client-id: ${{ secrets.TAILSCALE_OAUTH_CLIENT_ID }}
        oauth-secret: ${{ secrets.TAILSCALE_OAUTH_SECRET }}
        tags: tag:github-action-ci-runner
        # renovate: datasource=github-releases depName=tailscale/tailscale
        version: "1.68.1"

    - name: Login to Docker Hub
      if: ${{ inputs.repository_dockerhub != '' }}
      uses: docker/login-action@0d4c9c5ea7693da7b068278f7b52bda2a190a446 # v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Login to Homelab Registry
      uses: docker/login-action@0d4c9c5ea7693da7b068278f7b52bda2a190a446 # v3
      with:
        registry: ${{ secrets.CONTAINER_REGISTRY }}
        username: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
        password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}

    - name: Build and publish image
      id: build-image
      uses: docker/build-push-action@1a162644f9a7e87d8f4b053101d1d9a712edc18c # v6
      with:
        context: ./${{ inputs.image_context_path }}
        platforms: |-
          linux/arm64
          linux/amd64
        load: false
        push: ${{ inputs.repository_private_registry != '' || inputs.repository_dockerhub != '' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        annotations: ${{ steps.meta.outputs.annotations }}
        cache-from: ${{ env.CACHE_FROM }}
        cache-to: ${{ env.CACHE_TO }}

    - name: Prepare job outputs from image build
      id: image_info
      shell: bash
      env:
        IMAGE_ID: ${{ steps.build-image.outputs.imageid }}
        IMAGE_DIGEST: ${{ steps.build-image.outputs.digest }}
        IMAGE_METADATA: ${{ toJSON(steps.build-image.outputs.metadata) }}
      run: |
        echo "imageid=${IMAGE_ID}" >> $GITHUB_OUTPUT
        echo "digest=${IMAGE_DIGEST}" >> $GITHUB_OUTPUT
        echo "metadata=${IMAGE_METADATA}" >> $GITHUB_OUTPUT

    - name: Docker Hub Description
      if: ${{ inputs.repository_dockerhub != '' }}
      uses: peter-evans/dockerhub-description@e98e4d1628a5f3be2be7c231e50981aee98723ae # v4
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        repository: ${{ inputs.repository_dockerhub }}
        readme-filepath: ./${{ inputs.image_context_path }}/README.md
        short-description: ${{ inputs.label_description }}
        enable-url-completion: true

    - name: Tailscale Disconnect
      if: ${{ (success() || failure()) && inputs.repository_private_registry != '' }}
      run: sudo -E tailscale logout
