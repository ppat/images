---
# yamllint disable rule:line-length
name: build-image-workflow

# yamllint disable-line rule:truthy
on:
  workflow_call:
    inputs:
      image_name:
        required: true
        type: string
      app_version:
        type: string
        default: 'none'
      label_title:
        required: true
        type: string
      label_description:
        required: true
        type: string
      source_git_ref:
        required: true
        type: string
      timeout_minutes:
        required: true
        type: number
    outputs:
      imageid:
        value: ${{ jobs.build-image.outputs.imageid }}
      digest:
        value: ${{ jobs.build-image.outputs.digest }}
      metadata:
        value: ${{ jobs.build-image.outputs.metadata }}

jobs:
  build-image:
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.timeout_minutes }}

    env:
      DOCKERHUB_REPOSITORY: "ppatlabs/${{ inputs.image_name }}"
      HOMELAB_REPOSITORY: ${{ secrets.CONTAINER_REGISTRY }}/${{ vars.CONTAINER_REGISTRY_PATH }}/${{ inputs.image_name }}
      IMAGE_CACHE: ${{ secrets.CONTAINER_REGISTRY }}/${{ vars.CONTAINER_REGISTRY_CACHE_PATH }}/${{ inputs.image_name }}
      # PUBLISH variable affects:
      # - image tagging and docker build caches
      # - pushes to docker hub registry (all builds are pushed to homelab registry regardless)
      PUBLISH: ${{ startsWith(inputs.source_git_ref, 'refs/tags/') && inputs.app_version != 'none' }}

    outputs:
      imageid: ${{ steps.image_info.outputs.imageid }}
      digest: ${{ steps.image_info.outputs.digest }}
      metadata: ${{ steps.image_info.outputs.metadata }}

    steps:
    - name: Checkout
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
      with:
        fetch-depth: 1
        ref: ${{ inputs.source_git_ref }}

    - name: Set required parameters as environment variables
      shell: bash
      env:
        SOURCE_GIT_REF: ${{ inputs.source_git_ref }}
        CACHE_TO_PARAMS: image-manifest=true,oci-mediatypes=true,mode=max,compression=zstd
      # yamllint disable-line rule:indentation
      run: |
        GIT_SHA="$(git rev-parse --short HEAD)"
        echo "GIT_SHA=$GIT_SHA" >> $GITHUB_ENV

        if [[ "$PUBLISH" == "true" ]]; then
          IMAGE_TAG="$(echo $SOURCE_GIT_REF | cut -d'/' -f4)"
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

          echo "CACHE_FROM=\"type=registry,ref=${IMAGE_CACHE}:main\"" >> $GITHUB_ENV
          echo "CACHE_TO=\"type=registry,ref=${IMAGE_CACHE}:main,${CACHE_TO_PARAMS}\"" >> $GITHUB_ENV
        else
          IMAGE_TAG="$(echo $SOURCE_GIT_REF | cut -d'/' -f3)"
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

          echo "CACHE_FROM=\"type=registry,ref=${IMAGE_CACHE}:main,type=registry,ref=${IMAGE_CACHE}:${IMAGE_TAG}\"" >> $GITHUB_ENV
          echo "CACHE_TO=\"type=registry,ref=${IMAGE_CACHE}:${IMAGE_TAG},${CACHE_TO_PARAMS}\"" >> $GITHUB_ENV
        fi

    - name: Show build parameters
      shell: bash
      run: |
        env | sort | grep -E '^(CACHE_|GIT_SHA|IMAGE_|PUBLISH)'

    - name: Set up QEMU
      uses: docker/setup-qemu-action@5927c834f5b4fdf503fca6f4c7eccda82949e1ee # v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@4fd812986e6c8c2a69e18311145f9371337f27d4 # v3
      with:
        buildkitd-flags: '--debug --allow-insecure-entitlement=network.host'
        driver-opts: network=host
        platforms: linux/amd64,linux/arm64

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5
      with:
        images: |-
          ${{ env.HOMELAB_REPOSITORY }}
          ${{ env.PUBLISH == 'true' && env.DOCKERHUB_REPOSITORY || '' }}
        labels: |
          org.opencontainers.image.title=${{ inputs.label_title }}
          org.opencontainers.image.description=${{ inputs.label_description }}
        tags: |-
          type=raw,value=${{ env.IMAGE_TAG }},enable=${{ env.PUBLISH == 'true' }},priority=1000
          type=semver,pattern={{version}},value=${{ inputs.app_version }},enable=${{ env.PUBLISH == 'true' }},priority=900
          type=semver,pattern={{major}}.{{minor}},value=${{ inputs.app_version }},enable=${{ env.PUBLISH == 'true' }},priority=800
          type=semver,pattern={{major}},value=${{ inputs.app_version }},enable=${{ env.PUBLISH == 'true' }},priority=700
          type=raw,value=latest,enable=${{ env.PUBLISH == 'true' }},priority=200

          type=raw,value=${{ env.IMAGE_TAG }},enable=${{ env.PUBLISH == 'false' }},prefix=branch-,priority=400
          type=raw,value=${{ env.GIT_SHA }},prefix=git-,priority=300

    - name: Tailscale Connect
      uses: tailscale/github-action@4e4c49acaa9818630ce0bd7a564372c17e33fb4d # v2
      with:
        oauth-client-id: ${{ secrets.TAILSCALE_OAUTH_CLIENT_ID }}
        oauth-secret: ${{ secrets.TAILSCALE_OAUTH_SECRET }}
        tags: tag:github-action-ci-runner
        # renovate: datasource=github-releases depName=tailscale/tailscale
        version: "1.68.1"

    - name: Login to Docker Hub
      if: ${{ env.PUBLISH == 'true' }}
      uses: docker/login-action@0d4c9c5ea7693da7b068278f7b52bda2a190a446 # v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Login to Homelab Registry
      uses: docker/login-action@0d4c9c5ea7693da7b068278f7b52bda2a190a446 # v3
      with:
        registry: ${{ secrets.CONTAINER_REGISTRY }}
        username: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
        password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}

    - name: Build and publish image
      id: build-image
      uses: docker/build-push-action@1a162644f9a7e87d8f4b053101d1d9a712edc18c # v6
      with:
        context: ./${{ inputs.image_name }}
        platforms: |-
          linux/arm64
          linux/amd64
        load: false
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        annotations: ${{ steps.meta.outputs.annotations }}
        cache-from: ${{ env.CACHE_FROM }}
        cache-to: ${{ env.CACHE_TO }}

    - name: Prepare job outputs from image build
      id: image_info
      shell: bash
      env:
        IMAGE_ID: ${{ steps.build-image.outputs.imageid }}
        IMAGE_DIGEST: ${{ steps.build-image.outputs.digest }}
        IMAGE_METADATA: ${{ toJSON(steps.build-image.outputs.metadata) }}
      run: |
        echo "imageid=${IMAGE_ID}" >> $GITHUB_OUTPUT
        echo "digest=${IMAGE_DIGEST}" >> $GITHUB_OUTPUT
        echo "metadata=${IMAGE_METADATA}" >> $GITHUB_OUTPUT

    - name: Docker Hub Description
      if: ${{ env.PUBLISH == 'true' }}
      uses: peter-evans/dockerhub-description@e98e4d1628a5f3be2be7c231e50981aee98723ae # v4
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        repository: ${{ env.DOCKERHUB_REPOSITORY }}
        readme-filepath: ./${{ inputs.image_name }}/README.md
        short-description: ${{ inputs.label_description }}
        enable-url-completion: true

    - name: Tailscale Disconnect
      if: success() || failure()
      run: sudo -E tailscale logout
