---
# yamllint disable rule:line-length
name: build-image-workflow

# yamllint disable-line rule:truthy
on:
  workflow_call:
    inputs:
      image_context_path:
        required: true
        type: string
      label_title:
        required: true
        type: string
      label_description:
        required: true
        type: string
      platforms:
        required: true
        type: string
      repository_dockerhub:
        type: string
        required: false
      source_git_ref:
        required: true
        type: string
      timeout_minutes:
        required: true
        type: number
    secrets:
      build_secrets:
        required: false
      dockerhub_username:
        required: false
      dockerhub_token:
        required: false
      private_registry_username:
        required: false
      private_registry_token:
        required: false
      repository_private_registry:
        required: false
      repository_build_cache:
        required: false
      tailscale_oauth_client_id:
        required: false
      tailscale_oauth_secret:
        required: false
    outputs:
      digest:
        value: ${{ jobs.build-image.outputs.digest }}
      image_id:
        value: ${{ jobs.build-image.outputs.image_id }}
      image_tag:
        value: ${{ jobs.build-image.outputs.image_tag }}
      metadata:
        value: ${{ jobs.build-image.outputs.metadata }}

env:
  PUBLISH_DOCKERHUB: ${{ inputs.repository_dockerhub != '' && secrets.dockerhub_username != '' && secrets.dockerhub_token != '' }}
  PUBLISH_PRIVATE_REGISTRY: ${{ secrets.repository_private_registry != '' && secrets.private_registry_username != '' && secrets.private_registry_token != '' }}
  CONNECT_TAILSCALE: ${{ secrets.tailscale_oauth_client_id != '' && secrets.tailscale_oauth_secret != '' }}
  VERSION_SEMVER: ''
  VERSION_RAW: ''
  VERSION_SHA: ''
  CACHE_FROM: ''
  CACHE_TO: ''
  CACHE_LATEST: ''

jobs:
  build-image:
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.timeout_minutes }}

    outputs:
      digest: ${{ steps.image_info.outputs.digest }}
      image_id: ${{ steps.image_info.outputs.image_id }}
      image_tag: ${{ steps.image_info.outputs.image_tag }}
      metadata: ${{ steps.image_info.outputs.metadata }}

    steps:
    - name: Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      with:
        fetch-depth: 1
        repository: ${{ github.repository }}
        ref: ${{ inputs.source_git_ref }}

    - name: Automatically set image tag from git tag
      if: ${{ startsWith(inputs.source_git_ref, 'refs/tags/') }}
      shell: bash
      env:
        SOURCE_GIT_REF: ${{ inputs.source_git_ref }}
      # yamllint disable-line rule:indentation
      run: |
        # use the git ref segment after the final slash (as tag can contain a slash)
        VERSION_RAW="$(echo $SOURCE_GIT_REF | grep -oE '[^/]+$')"
        VERSION_SEMVER="$(echo $VERSION_RAW | grep -o -E '[0-9]+\.[0-9]+\.[0-9]+' | head -1)"
        VERSION_SHA="$(git rev-parse --short HEAD)"

        set -x
        echo "VERSION_SEMVER=$VERSION_SEMVER" >> $GITHUB_ENV
        echo "VERSION_RAW=$VERSION_RAW" >> $GITHUB_ENV
        echo "VERSION_SHA=$VERSION_SHA" >> $GITHUB_ENV

    - name: Automatically set image tag from branch
      if: ${{ startsWith(inputs.source_git_ref, 'refs/heads/') }}
      shell: bash
      env:
        SOURCE_GIT_REF: ${{ inputs.source_git_ref }}
      # yamllint disable-line rule:indentation
      run: |
        # use the git ref segment after the final slash (as branch can contain a slash)
        VERSION_RAW="$(echo $SOURCE_GIT_REF | grep -oE '[^/]+$')"
        VERSION_SHA="$(git rev-parse --short HEAD)"

        set -x
        echo "VERSION_RAW=$VERSION_RAW" >> $GITHUB_ENV
        echo "VERSION_SHA=$VERSION_SHA" >> $GITHUB_ENV

    - name: Automatically set image build cache parameters
      shell: bash
      env:
        SOURCE_GIT_REF: ${{ inputs.source_git_ref }}
        IMAGE_CACHE: ${{ secrets.repository_build_cache }}
        CACHE_PARAMS: image-manifest=true,oci-mediatypes=true,mode=max,compression=zstd
      # yamllint disable-line rule:indentation
      run: |
        if [[ "$IMAGE_CACHE" == '' ]]; then
          echo "No repository for docker build cache specified, disabling build cache all together."
          CACHE_FROM=""
          CACHE_TO=""
          CACHE_LATEST=""
        else
          LAST_COMMIT_MSG=$(git log --oneline --no-merges -1)
          if [[ "$LAST_COMMIT_MSG" =~ "[ci: bust-cache]" ]]; then
            echo "Instruction to bust cache detected in commit message."
            echo "Disabling use of cache for the build. This build itself will still be cached."
            CACHE_FROM=""
          else
            if [[ -z "$VERSION_SEMVER" ]]; then
              echo "Setting cache-from to use current branch, main branch and last build of any branch as caches..."
              CACHE_FROM="type=registry,ref=${IMAGE_CACHE}:main type=registry,ref=${IMAGE_CACHE}:branch-${VERSION_RAW} type=registry,ref=${IMAGE_CACHE}:cache-latest"
            else
              echo "Setting cache-from to use only main branch and current build of any branch as caches..."
              CACHE_FROM="type=registry,ref=${IMAGE_CACHE}:main type=registry,ref=${IMAGE_CACHE}:cache-latest"
            fi
          fi

          if [[ -z "$VERSION_SEMVER" ]]; then
            echo "Setting cache-to to push to branch cache..."
            CACHE_TO="type=registry,ref=${IMAGE_CACHE}:branch-${VERSION_RAW},${CACHE_PARAMS}"
          else
            echo "Setting cache-to to push to main cache..."
            CACHE_TO="type=registry,ref=${IMAGE_CACHE}:main,${CACHE_PARAMS}"
          fi
          CACHE_LATEST="type=registry,ref=${IMAGE_CACHE}:cache-latest,${CACHE_PARAMS}"
        fi

        set -x
        echo "CACHE_FROM=\"$CACHE_FROM\"" >> $GITHUB_ENV
        echo "CACHE_TO=\"$CACHE_TO\"" >> $GITHUB_ENV
        echo "CACHE_LATEST=\"$CACHE_LATEST\"" >> $GITHUB_ENV

    - name: Automatically set other parameters
      if: ${{ env.CONNECT_TAILSCALE == 'true' }}
      shell: bash
      env:
        PRIVATE_REGISTRY_REPOSITORY: ${{ secrets.repository_private_registry }}
      # yamllint disable-line rule:indentation
      run: |
        PRIVATE_REGISTRY="$(echo $PRIVATE_REGISTRY_REPOSITORY | grep -oE '^[^/]*')"
        echo "PRIVATE_REGISTRY=$PRIVATE_REGISTRY" >> $GITHUB_ENV

    - name: Show build parameters
      shell: bash
      run: |
        env | sort | grep -E '^(CACHE_|VERSION_)'

    - name: Set up QEMU
      uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349 # v3
      with:
        buildkitd-flags: '--debug --allow-insecure-entitlement=network.host'
        driver-opts: network=host
        platforms: ${{ inputs.platforms }}

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@369eb591f429131d6889c46b94e711f089e6ca96 # v5
      with:
        images: |-
          ${{ secrets.repository_private_registry != '' && secrets.repository_private_registry || '' }}
          ${{ inputs.repository_dockerhub != '' && inputs.repository_dockerhub || '' }}
        labels: |
          org.opencontainers.image.title=${{ inputs.label_title }}
          org.opencontainers.image.description=${{ inputs.label_description }}
          org.opencontainers.image.version=${{ env.VERSION_RAW }}
        annotations: |
          org.opencontainers.image.title=${{ inputs.label_title }}
          org.opencontainers.image.description=${{ inputs.label_description }}
          org.opencontainers.image.version=${{ env.VERSION_RAW }}
        tags: |-
          type=raw,value=${{ env.VERSION_RAW }},enable=${{ env.VERSION_SEMVER != '' }},priority=1000
          type=semver,pattern={{version}},value=${{ env.VERSION_SEMVER }},enable=${{ env.VERSION_SEMVER != '' }},priority=900
          type=semver,pattern={{major}}.{{minor}},value=${{ env.VERSION_SEMVER }},enable=${{ env.VERSION_SEMVER != '' }},priority=800
          type=semver,pattern={{major}},value=${{ env.VERSION_SEMVER }},enable=${{ env.VERSION_SEMVER != '' }},priority=700
          type=raw,value=latest,enable=${{ env.VERSION_SEMVER != '' }},priority=200
          type=raw,value=${{ env.VERSION_RAW }},enable=${{ env.VERSION_SEMVER == '' }},prefix=branch-,priority=400
          type=raw,value=${{ env.VERSION_SHA }},prefix=git-,priority=300

    - name: Tailscale Connect
      if: ${{ env.CONNECT_TAILSCALE == 'true' }}
      uses: tailscale/github-action@4e4c49acaa9818630ce0bd7a564372c17e33fb4d # v2
      with:
        oauth-client-id: ${{ secrets.tailscale_oauth_client_id }}
        oauth-secret: ${{ secrets.tailscale_oauth_secret }}
        tags: tag:github-action-ci-runner
        # renovate: datasource=github-releases depName=tailscale/tailscale
        version: "1.76.6"

    - name: Login to Docker Hub
      if: ${{ env.PUBLISH_DOCKERHUB == 'true' }}
      uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3
      with:
        username: ${{ secrets.dockerhub_username }}
        password: ${{ secrets.dockerhub_token }}

    - name: Login to Homelab Registry
      if: ${{ env.PUBLISH_PRIVATE_REGISTRY == 'true' }}
      uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3
      with:
        registry: ${{ env.PRIVATE_REGISTRY }}
        username: ${{ secrets.private_registry_username }}
        password: ${{ secrets.private_registry_token }}

    - name: Build and publish image
      id: build-image
      uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75 # v6
      with:
        context: ./${{ inputs.image_context_path }}
        platforms: ${{ inputs.platforms }}
        load: false
        push: ${{ env.PUBLISH_PRIVATE_REGISTRY == 'true' || env.PUBLISH_DOCKERHUB == 'true' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        annotations: ${{ steps.meta.outputs.annotations }}
        cache-from: ${{ env.CACHE_FROM }}
        cache-to: ${{ env.CACHE_TO }}
        no-cache: ${{ env.CACHE_FROM == '' && env.CACHE_TO == '' }}
        sbom: ${{ env.PUBLISH_PRIVATE_REGISTRY == 'true' || env.PUBLISH_DOCKERHUB == 'true' }}
        provenance: ${{ env.PUBLISH_PRIVATE_REGISTRY == 'true' || env.PUBLISH_DOCKERHUB == 'true' }}
        secrets: ${{ secrets.build_secrets }}

    - name: Also cache build as cache-latest
      if: ${{ env.CACHE_LATEST != '' }}
      uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75 # v6
      with:
        context: ./${{ inputs.image_context_path }}
        platforms: ${{ inputs.platforms }}
        load: false
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        annotations: ${{ steps.meta.outputs.annotations }}
        cache-to: ${{ env.CACHE_LATEST }}
        sbom: ${{ env.PUBLISH_PRIVATE_REGISTRY == 'true' || env.PUBLISH_DOCKERHUB == 'true' }}
        provenance: ${{ env.PUBLISH_PRIVATE_REGISTRY == 'true' || env.PUBLISH_DOCKERHUB == 'true' }}
        secrets: ${{ secrets.build_secrets }}

    - name: Prepare job outputs from image build
      id: image_info
      shell: bash
      env:
        IMAGE_ID: ${{ steps.build-image.outputs.imageid }}
        IMAGE_TAG: ${{ steps.meta.outputs.version }}
        IMAGE_DIGEST: ${{ steps.build-image.outputs.digest }}
        IMAGE_METADATA: ${{ toJSON(steps.build-image.outputs.metadata) }}
      run: |
        echo "digest=${IMAGE_DIGEST}" >> $GITHUB_OUTPUT
        echo "image_id=${IMAGE_ID}" >> $GITHUB_OUTPUT
        echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
        echo "metadata=${IMAGE_METADATA}" >> $GITHUB_OUTPUT

    - name: Docker Hub Description
      if: ${{ env.PUBLISH_DOCKERHUB == 'true' }}
      uses: peter-evans/dockerhub-description@e98e4d1628a5f3be2be7c231e50981aee98723ae # v4
      with:
        username: ${{ secrets.dockerhub_username }}
        password: ${{ secrets.dockerhub_token }}
        repository: ${{ inputs.repository_dockerhub }}
        readme-filepath: ./${{ inputs.image_context_path }}/README.md
        short-description: ${{ inputs.label_description }}
        enable-url-completion: true

    - name: Tailscale Disconnect
      if: ${{ (success() || failure()) && env.CONNECT_TAILSCALE == 'true' }}
      run: sudo -E tailscale logout
